head(tr)
tail(tr)
trm <- melt(tr, id =c("Time", "QR", "EQR", "Performance", "Need"))
head(trm)
trm <- select(tr, -npRatio)
head(trm)
trm <- melt(trm, id = "Time")
head(trm)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(variable)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(trm$variable)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(aes(trm$variable))
h
h <- ggplot(data = trm, aes(Time, value)) 
h
h <- ggplot(data = trm, aes(trm$Time, trm$value)) + geom_line()
h <- h + facet_wrap(~ variable, nrow = 2, ncol=2)
h
tail(trm)
tr <- stepFailRecover(btt, 50, 75, 1.2, .05, .95)
head(tr)
tr <- constantNeed(tr, .9)
head(tr)
trm <- quotRes(tr)
head(tr)
head(trm)
trm <- extQuotRes(trm, 1)
head(trm)
tail(trm)
1=>9
1 >= 9
exp[1]
exp(1)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
head(trm)
th <- findFailedStates(trm)
th <- findFailedStates(trm)
head(th)
filter(th, Time == minTime)$Performance
filter(th, Time == min(Time))$Performance
head(h)
head(eg)
eg
resFac(eg)
resFac(eg, 30, 75,75, 0)
options(error=recover)
resFac(eg, 30, 75,75, 0)
ls()
tt
exit
resFac(eg, 30, 75,75, 0)
ls()
ls()
resFac(eg, 30, 75,75, 0)

. + 
tt
eg$Performance[1]
eg$Performance
eg$Performance
resFac(eg, 30, 75,75, 0)
resFac(eg, 30, 75,75, 0) <- eg2
resFac(eg, 30, 75,75, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 0) -> eg2
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg3 <- extResFac(eg2, 30, 75, 75, 40, 0, 0)
eg3 <- extResFac(eg2, 30, 75, 75, 40, 0, 0)
eg3
rm(eg)
rm(eg2)
rm(eg3)
eg <- stepFailRecover(timeTick, 30,75, )
0
0
2
ls()
0
0
testFrame0
testFrame0
0
0
testFrame0
testFrame1
testFrame0 - testFrame1
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
0
0
0
testFrame0
gt <- select(testFrame0, -c(extResArea, npRatio))
gt
colnames(testFrame0)
tf0 <- tidyDF(testFrame0)
tf0
tf0 <- tidyDF(testFrame0)
tf0
testFrame0
testFrame0
testFrame0
testFrame0
tf0 <- tidyDF(testFrame0)
0
testFrame0$extResilience - testFrame0$statQuoResilience
tf0 <- tidyDF(testFrame0)
tf0
tf0
tfA
tfA
head(tfB)
head(trBm)
0
head(trBm)
trB0
0
head(tfB)
head(tfB)
head(tfBm)
head(trBm)
trBm <- group_by(trBm, value)
head(trBm)
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes = pattern)
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes = color)
0
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(pattern = variable))
th
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th
th <- ggplot(trBm, aes(Time, value)) + geom_line()
th
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th
rlnorm(5)
rlnorm(5, log = TRUE)
head(th)
head(tf0)
tf0 %>% filter(Time < 5) %>% Need
head(tfA)
min(filter(tf0, Time < 60, npRatio >= 1))
min(filter(tf0, Time < 60 & npRatio >= 1))
0
min(filter(tfA, Time < 60 & npRatio >= 1))
tfA
min(filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m <- (filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m
tfA$npRatio <- 1.3
tfA$npRatio[4] <- 1.2
m <- (filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m
min(m)
timePull(tfA)
r <- timePull(tfA)
r
r <- timePull(tfA)
r
r <- timePull(tfA)

. + 
tr <- data.frame(time = 0)
tr
tr <- data.frame(time = 0, fg = 90)
tr
r <- timePull(tfA)
r
r <- timePull(tfA)
r
r <- timePull(tfA)
r
tfA
tfA$npRatio[12] <- .1
r <- timePull(tfA)
r
0
0
0
0
0
testFrame0
0
testFrame0
testFrame0
testFrame0
0
testFrame0
tf0
tf0
tf0
)

. + 
quit()
y
quit()
cquit()
head(tf0a)
f <- timeHorPlot(tf0a)
tf0a$Run <- 1
f <- timeHorPlot(tf0a)
f
quit()
y
source("metrics.R")
head(tidyNtt)
tail(tidyNtt)
g <- pltMoveNeed(tidyNtt)
g <- pltMoveNeed(tidyNtt, 100)
g
quit()
y
tTH
yuk <- seq(from = 0, to = 1.0, by = 0.01)
length(yuk)
yuk[1]
yuk[2]
head(subStep)
subStep[3]
quit()
y
workSub
workSub
sigma
head(tidySub)
tail(tidySub)
tSub
tSub
tSub
tSub
quit()
y
p
quit()
n
m <- timecolumn(100, 1)
m <- timeColumn(100, 1)
head(m)
m <- linearNeed(m, 1, .01)
head(m)
tail(m)
m <- linearNeed(m, 1, .01)
m <- linearNeed(m, 1, 20,.01)
m <- linearNeed(m, 1, 20,.01)
m
m <- linearNeed(m, 1, 20,.01)
tail(m)
m <- resTriangle(m, 10, 90, 1, 0, 2)
m <- resTriangle(m, 10, 90, 1, 0, 2)
tail(m)
m
kl <- ggplot(m, aes(Time, Performance)) + geom_line()
kl
t
n
p
m
mDiff <- m %>% transmute(m, diff = Performance - lag(Performance,1))
mDiff <- m %>% transmute(diff = Performance - lag(Performance,1))
head(mDiff)
tail(mDiff)
mDiff
mDiff <- m %>% mutate(diff = Performance - lag(Performance,1)) %>%
filter(diff <=0)
head(mDiff)
head(m)
tail(m)
mDiff <- m %>% filter(Time > 20) %>% mutate(diff = Performance - lag(Performance,1)) %>%
filter(diff <=0)
mDiff
mDiff$Time[1]
tail(m, 15)
kl <- pltMoveTimeH(k)
kl <- pltMoveTimeH(k)
head(k)
kl <- pltMoveTimeH(k)
kl
kl <- pltMoveTimeH(k)
kl
kl <- pltMoveTimeH(k)
kl
kl
dim(k)
dim(t)
length(t0
)
length(t)
t
t1 <- t
t1$endtime[2] <- 2
t1
t1$endTime[2] <- 2
t1
dim(t1)
length(t1$endtime)
t
t2 <- data.frame(t)
t2
dim(t2)
dim(t2)[1]
k1 <- buildResMatrix(t, n, p, r)
k-k1
head(k)
k[2,3]
k[2,2]
head(k[:,1])
k[1]
k[,1]
k[:][1]
k[][1]
k[,1]
k
mapply(rep, 1:4, 4:1)
is.data.frame(k)
k[1]
k[[1]]
k[1:3,1:3]
k[1:3,]
k[1,]
k[1, ]
k <- cbind(k, milf = 3, drop = 4)
k[1,]
k[101,]
source("metrics.R")
source("metrics.R")
nL
ifelse( 5 >3, 'a', 'b')
g <- data.frame())
g <- data.frame()
g
g > 0
logical(0)
length(g)
!length(g)
head(mnop)
head(mnop)
head(mnop)
dim(mnop)
dim(mnop)
dim(mnop)
head(mnop)
tail(mnop)
1:5
head(mnop)
dim(mnop)
tail(mnop)
tcheck <- filter(mnop, Time > 100)
tcheck
tL
tail(qwer)
kl
fg <- c(pd = 1, pf = 2)
fg
fg[1]
fg[1,]
fg[1,1]
fg[pd]
fg["pd"]
gh <- data.frame()
cbind(gh, fg)
dim(fg)
t
n
p
r
n
qwer
head(qwer)
filter(qwer, Time ==1)
filter(mnop, Time ==1)
filter(mnop, Time ==1)[1]
filter(mnop, Time ==1)[1,]
head(qwer)
 rt <- expand.grid(tL, nL, pL, rL)
rt
tL
tail(pVaryFailTri)
dim(pVFS)
pVaryFailTri[91]
pVaryFailTri[91,]
pVaryFailTri[89:93,]
head(pVFS)
tail(pVFS)
install.packages("reshape2")
install.packages("reshape2")
if(!require("installr")) install.packages("installer")
if(!require("installr")) install.packages("installr")
library("installr")
instllr()
updateR()
install.packages("stringi")
updateR()
updateR()
quit()
y
quit()
n
rep(1)
rep(1,2)
c(rep(1,2), rep(3,4))
?seq
seq(1,5,1)
source('metrics.R')
resTriangle(seq(1, 5, 1), 2, 3, .1, .8)
resTriangle(seq(1, 5, 1), 2, 3, 1.0, 0.1, 0.8)
resTriangle(data.frame(Time = seq(1, 5, 1)), 2, 3, 1.0, 0.1, 0.8)
seq(30,5)
seq(0,30,5)
getwd()
source("metrics.R")
source("metrics.R")
head(examFail)
list(g = 23, f = "ind")
list(g = 23, f = "ind") ->j
j$g
length(examfail$Performance)
length(examFail$Performance)
head(examData)
head(exampData)
colnames(examFail)
colnames(examFail)
head(examFail$Performance)
tail(examFail$Performance)
source("metrics.R")
head(exampData)
tail(exampData)
examPlot <- pltMoveTimeH(exampData)
examPlot
examPlot
examFail[1:40]
examFail$Performance
examPlot
examPlot
q()
y
source("metrics.R")
source("metrics.R")
pltPerf(exampData)
g <- pltPerf(exampData)
g
colnames(exampData)
unique(exampData$QR_Td)
exampData$QR_Td
exampData$RF_FailTime
examPlot
examPlot
exampData$QR_Td[1]
examPlot
examPlot <- examPlot + geom_point(aes(QR_Td[1], exampData$Performance[exampData$Time == exampData$QR_Td[1q()]]))
q()
y
library("dplyr")
source("metrics.R")
quit()
n
