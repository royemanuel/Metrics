library('installr')
install.R
install.R()
quit()
y
performance(timeTick)
performance(timeTick)
performance(timeTick)
performance(timeTick, 1)
performance(timeTick, sqrt)
stepFailRecover(timeTick, 35, 60, 1.0, .5, .75)
vignette("window-functions" <- 
)
vignette("window-functions")
f <- stepFailRecover(timeTick, 50, 80, 1, .2, 1.3)
f
f<-constantNeed(f, 1)
f
fm <- melt(f, id=("Time"))
head(fm)
fp <- ggplot(data=fp, aes(Time, value), group(variable)) 
fp <- ggplot(data=fm, aes(Time, value), group(variable)) 
fp <- fp + geom_line()
fp
fm <- group_by(fm, variable)
fp <- ggplot(data=fm, aes(Time, value), group(variable)) 
fp <- fp + geom_line()
fp
fp <- ggplot(data=fm, aes(Time, value), group(variable)) 
fp <- fp + geom_line(aes(color=variable)
)
fp
fp <- fp + geom_line(aes(linetype=variable))
fp
fp <- ggplot(data=fm, aes(Time, value)) 
fp <- fp + geom_line(aes(linetype=variable))
fp
fp <- fp + geom_point(aes(color=variable))
fp
head(timeTick)
f <- stepFailRecover(timeTick, 30, 80, 1, .1, .9)
g <- quotRes(f)
head(g)
tail(g)
tail(quotResF(f, .1, .9))
tail(quotResF(f, .1, 1))
quotRes(f)
head(timeTick)
head(f)
f <- constantNeed(.8)
f <- constantNeed(.8)
f <- constantNeed(timeTick,.8)
head(f)
head(g)
filter(g, Time < Time[min(Performance)])
filter(g, Time < Time[Performance == min(Performance)])
filter(g, Time < Time[Performance == min(Performance)])
td <- g %>% filter(Performance == .1)
td
td <- g %>% filter(Performance == 0.1) %>% filter(Time == min(Time))
td
td <- g %>% filter(Performance == 0.1) %>% filter(Time == min(Time)) %>% QR
head(g)
head(f)
f <- stepFailRecover(f)
f <- stepFailRecover(f, 30, 75, 1., .15, .97)
head(f)
tail(f)
appSig(f)
appSig(f$need, f$Performance, .5)
appSig(f)
f <- constantNeed(f)
f <- constantNeed(f, .8)
head(f)
g <- appSig(f, 0)
head(g)
g
g <- appSig(f, 1)
g
g <- appSig(f, 1)
g
g <- appSig(f, .2)
g
g <- sigmaApply(f, .2, "Ragnar")
g
f
appSig
colnames(f)[-1] <- 'hang'
f
sigmaApply(f)
f <- stepFailRecover(timeTick, 30, 75, 1.1, .2, .9)
f <- constantNeed(f, .8)
sigmaApply(f, .5)
sigmaApply(f, .5, 'dobbi')
f
sigmaApply(f, .5, 'dobbi') -> g
g
sigmaApply(f, .5, 'dobbi') -> g
g
colnames(g)
colnames(g) <- 'h'
g
sigmaApply(f, .5, 'dobbi') -> g
g
dim(g)
dim(g)[2]
sigmaApply(f, .5, 'dobbi') -> g
f
colnames(f[dim(f[2])])
colnames(f)
dim(f)
sigmaApply(f, .5, 'dobbi') -> g
g
f[dim(f)[2]]
dim(f)
dim(f)[2]
dim(f)[2]
f[dim(f)[2]]
dim(f)[2]
f
g <- sigmaApply(f, .5, 'dobbi')
g
g <- sigmaApply(f, .5, 'dobbi')
g
g[1][2]
g[[1]][[2]]
g[[1]][[3]]
g[[2]][[3]]
g$Performance[Time == 70]
g[Time == 70]
g$Performance[g$Time == 70]
g
g <- select(g, Time, Performance, Need)
g
g <- extQuotRes(g, 1)
g <- extQuotRes(g, 1)
g <- extQuotRes(g, 1)
g
g
g <- extQuotRes(g, 1)
g <- select(g, Time, Performance, Need)
g <- extQuotRes(g, 1)
g
print(g)
g <- extQuotRes(g, 1)
g <- select(g, Time, Performance, Need)
g <- extQuotRes(g, 1)
g
g <- select(g, Time, Performance, Need)
g <- extQuotRes(g, 1)
g
quotRes(g)
g <- select(g, Time, Performance, Need, QR)
quotRes(g) ->g
g <- select(g, Time, Performance, Need, QR)
.9/1.1
g <- extQuotRes(g, 0)
g
print('g=', g)
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, 0)
g
g <- extQuotRes(g, 0)
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, 0)
g
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, 0)
g
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, .5)
g
g <- select(g, Time, Performance, Need, QR)
g$Need <- 1
g
g <- extQuotRes(g, 0)
g
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, 1)
g
g <- select(g, Time, Performance, Need, QR)
g <- extQuotRes(g, 1)
g
g <- select(g, Time, Performance, Need, QR)
g <- constantNeed(timeTick,1)
g <- stepFailRecover(g, 30, 75, 1.1, .2, .9)
g
g <- quotRes(g)
g
eg <- extQuotRes(g, 1)
g
eg
eg <- extQuotRes(g, 1)
eg
 head(timeTick)
btt <- data.frame(Time = seq(from = 0, to = 100, by = .01))
stepFailRecover(btt, 50, 75, 1.2, .05, .95)
tr <- stepFailRecover(btt, 50, 75, 1.2, .05, .95)
tr <- performance(tr, .9)
tr <- constantNeed(tr, .9)
tr <- quotRes(tr)
tr <- extQuotRes(tr)
tr <- extQuotRes(tr, .5)
head(tr)
tail(tr)
trm <- melt(tr, id =c("Time", "QR", "EQR", "Performance", "Need"))
head(trm)
trm <- select(tr, -npRatio)
head(trm)
trm <- melt(trm, id = "Time")
head(trm)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(variable)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(trm$variable)
h <- ggplot(data = trm, aes(Time, value)) + geom_line(aes(trm$variable))
h
h <- ggplot(data = trm, aes(Time, value)) 
h
h <- ggplot(data = trm, aes(trm$Time, trm$value)) + geom_line()
h <- h + facet_wrap(~ variable, nrow = 2, ncol=2)
h
tail(trm)
tr <- stepFailRecover(btt, 50, 75, 1.2, .05, .95)
head(tr)
tr <- constantNeed(tr, .9)
head(tr)
trm <- quotRes(tr)
head(tr)
head(trm)
trm <- extQuotRes(trm, 1)
head(trm)
tail(trm)
1=>9
1 >= 9
exp[1]
exp(1)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
speedFactor(3, 5, 8, .5)
head(trm)
th <- findFailedStates(trm)
th <- findFailedStates(trm)
head(th)
filter(th, Time == minTime)$Performance
filter(th, Time == min(Time))$Performance
head(h)
head(eg)
eg
resFac(eg)
resFac(eg, 30, 75,75, 0)
options(error=recover)
resFac(eg, 30, 75,75, 0)
ls()
tt
exit
resFac(eg, 30, 75,75, 0)
ls()
ls()
resFac(eg, 30, 75,75, 0)

. + 
tt
eg$Performance[1]
eg$Performance
eg$Performance
resFac(eg, 30, 75,75, 0)
resFac(eg, 30, 75,75, 0) <- eg2
resFac(eg, 30, 75,75, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 0) -> eg2
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2 <- select(eg2, -Rho)
resFac(eg, 30, 75,75, 45, 0) -> eg2
eg2
eg3 <- extResFac(eg2, 30, 75, 75, 40, 0, 0)
eg3 <- extResFac(eg2, 30, 75, 75, 40, 0, 0)
eg3
rm(eg)
rm(eg2)
rm(eg3)
eg <- stepFailRecover(timeTick, 30,75, )
0
0
2
ls()
0
0
testFrame0
testFrame0
0
0
testFrame0
testFrame1
testFrame0 - testFrame1
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
testFrame2
testFrame2 <- intRes(testFrame1)
0
testFrame2 <- intRes(testFrame1)
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
testFrame2 <- intRes(testFrame1, 0)
testFrame2
0
0
0
testFrame0
gt <- select(testFrame0, -c(extResArea, npRatio))
gt
colnames(testFrame0)
tf0 <- tidyDF(testFrame0)
tf0
tf0 <- tidyDF(testFrame0)
tf0
testFrame0
testFrame0
testFrame0
testFrame0
tf0 <- tidyDF(testFrame0)
0
testFrame0$extResilience - testFrame0$statQuoResilience
tf0 <- tidyDF(testFrame0)
tf0
tf0
tfA
tfA
head(tfB)
head(trBm)
0
head(trBm)
trB0
0
head(tfB)
head(tfB)
head(tfBm)
head(trBm)
trBm <- group_by(trBm, value)
head(trBm)
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes = pattern)
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes = color)
0
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(pattern = variable))
th
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th
th <- ggplot(trBm, aes(Time, value)) + geom_line()
th
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th <- ggplot(trBm, aes(Time, value)) + geom_line(aes(colorConverter = variable))
th
rlnorm(5)
rlnorm(5, log = TRUE)
head(th)
head(tf0)
tf0 %>% filter(Time < 5) %>% Need
head(tfA)
min(filter(tf0, Time < 60, npRatio >= 1))
min(filter(tf0, Time < 60 & npRatio >= 1))
0
min(filter(tfA, Time < 60 & npRatio >= 1))
tfA
min(filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m <- (filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m
tfA$npRatio <- 1.3
tfA$npRatio[4] <- 1.2
m <- (filter(tfA, Time < 60 & npRatio >= 1)$npRatio)
m
min(m)
timePull(tfA)
r <- timePull(tfA)
r
r <- timePull(tfA)
r
r <- timePull(tfA)

. + 
tr <- data.frame(time = 0)
tr
tr <- data.frame(time = 0, fg = 90)
tr
r <- timePull(tfA)
r
r <- timePull(tfA)
r
r <- timePull(tfA)
r
tfA
tfA$npRatio[12] <- .1
r <- timePull(tfA)
r
0
0
0
0
0
testFrame0
0
testFrame0
testFrame0
testFrame0
0
testFrame0
tf0
tf0
tf0
)

. + 
quit()
y
